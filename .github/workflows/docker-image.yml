name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  check-for-existing-docker-image-frontend:
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      result: ${{ steps.image_exists.conclusion }}  
      image: ${{ steps.image_exists.outputs.image }}
      tag: ${{ steps.image_exists.outputs.tag }}
      current-version: ${{ steps.package-version.outputs.current-version }}
    steps:  
      - uses: actions/checkout@v3
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./mozi-frontend
      - name: Check image
        id: image_exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          registry: registry.hub.docker.com
          organization: "${{ github.event.repository.owner.login }}"
          repository: "${{ github.event.repository.name }}"
          login: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          tag: frontend-v${{steps.package-version.outputs.current-version}}
      - run: echo ${{ steps.image_exists.conclusion }}

  check-for-existing-docker-image-backend:
    runs-on: ubuntu-latest
    continue-on-error: true  
    outputs:
      result: ${{ steps.image_exists.conclusion }}  
      image: ${{ steps.image_exists.outputs.image }}
      tag: ${{ steps.image_exists.outputs.tag }}
      current-version: ${{ steps.package-version.outputs.current-version }}
    steps:  
      - uses: actions/checkout@v3
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ./mozi-backend
      - name: Check image
        id: image_exists
        uses: cloudposse/github-action-docker-image-exists@main
        with:
          registry: registry.hub.docker.com
          organization: "${{ github.event.repository.owner.login }}"
          repository: "${{ github.event.repository.name }}"
          login: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_PASSWORD }}"
          tag: backend-v${{steps.package-version.outputs.current-version}}
      - run: echo ${{ steps.image_exists.conclusion }}
      
  build-frontend:

    runs-on: ubuntu-latest
    name: build
    needs: check-for-existing-docker-image-frontend
    steps:
    - uses: actions/checkout@v3
    - uses: mr-smithers-excellent/docker-build-push@v5
      name: Build & push frontend Docker image
      with:
        image: hamzabalazs/moviezone
        tags: frontend-v${{ needs.check-for-existing-docker-image-frontend.outputs.current-version }}
        registry: docker.io
        directory: ./mozi-frontend
        dockerfile: mozi-frontend/Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} 
      if: needs.check-for-existing-docker-image-frontend.outputs.result != 'success'
    - run: |
        echo Tag already exists!
        exit 1
      if: needs.check-for-existing-docker-image-frontend.outputs.result == 'success'
  
  build-backend:

    runs-on: ubuntu-latest
    name: build
    needs: check-for-existing-docker-image-backend
    steps:
    - uses: actions/checkout@v3
    - uses: mr-smithers-excellent/docker-build-push@v5
      name: Build & push backend Docker image
      with:
        image: hamzabalazs/moviezone
        tags: backend-v${{ needs.check-for-existing-docker-image-backend.outputs.current-version }}
        registry: docker.io
        directory: ./mozi-backend
        dockerfile: mozi-backend/Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: needs.check-for-existing-docker-image-backend.outputs.result != 'success'
    - run: |
        echo Tag already exists!
        exit 1
      if: needs.check-for-existing-docker-image-backend.outputs.result == 'success'

  Undo:
    runs-on: ubuntu-latest
    needs: [check-for-existing-docker-image-backend,check-for-existing-docker-image-frontend]
    name: undo
    steps:
    - uses: actions/checkout@v3
    - name: Undo push
      run: |
        /usr/bin/docker run --name c04429a65c8b591e34514af9ee8e204e5e689_b261ed --label 6c0442 --workdir /github/workspace --rm -e "INPUT_BRANCH" -e "HOME" -e "GITHUB_JOB" -e "GITHUB_REF" -e "GITHUB_SHA" -e "GITHUB_REPOSITORY" -e "GITHUB_REPOSITORY_OWNER" -e "GITHUB_REPOSITORY_OWNER_ID" -e "GITHUB_RUN_ID" -e "GITHUB_RUN_NUMBER" -e "GITHUB_RETENTION_DAYS" -e "GITHUB_RUN_ATTEMPT" -e "GITHUB_REPOSITORY_ID" -e "GITHUB_ACTOR_ID" -e "GITHUB_ACTOR" -e "GITHUB_TRIGGERING_ACTOR" -e "GITHUB_WORKFLOW" -e "GITHUB_HEAD_REF" -e "GITHUB_BASE_REF" -e "GITHUB_EVENT_NAME" -e "GITHUB_SERVER_URL" -e "GITHUB_API_URL" -e "GITHUB_GRAPHQL_URL" -e "GITHUB_REF_NAME" -e "GITHUB_REF_PROTECTED" -e "GITHUB_REF_TYPE" -e "GITHUB_WORKFLOW_REF" -e "GITHUB_WORKFLOW_SHA" -e "GITHUB_WORKSPACE" -e "GITHUB_ACTION" -e "GITHUB_EVENT_PATH" -e "GITHUB_ACTION_REPOSITORY" -e "GITHUB_ACTION_REF" -e "GITHUB_PATH" -e "GITHUB_ENV" -e "GITHUB_STEP_SUMMARY" -e "GITHUB_STATE" -e "GITHUB_OUTPUT" -e "RUNNER_OS" -e "RUNNER_ARCH" -e "RUNNER_NAME" -e "RUNNER_TOOL_CACHE" -e "RUNNER_TEMP" -e "RUNNER_WORKSPACE" -e "ACTIONS_RUNTIME_URL" -e "ACTIONS_RUNTIME_TOKEN" -e "ACTIONS_CACHE_URL" -e GITHUB_ACTIONS=true -e CI=true -v "/var/run/docker.sock":"/var/run/docker.sock" -v "/home/runner/work/_temp/_github_home":"/github/home" -v "/home/runner/work/_temp/_github_workflow":"/github/workflow" -v "/home/runner/work/_temp/_runner_file_commands":"/github/file_commands" -v "/home/runner/work/moviezone/moviezone":"/github/workspace" 6c0442:9a65c8b591e34514af9ee8e204e5e689
        cd /github/workspace
        git branch ${{ github.event.inputs.branch }}
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git reset --hard -- HEAD~1
        git push --force
    if: |
       needs.check-for-existing-docker-image-frontend.outputs.result == 'success' &&
       needs.check-for-existing-docker-image-backend.outputs.result == 'success'
